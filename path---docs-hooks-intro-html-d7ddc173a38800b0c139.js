webpackJsonp([0x9c8cc82185f0],{895:function(s,a){s.exports={data:{markdownRemark:{html:'<p><em>Hooks</em>是React v16.7.0-alpha中加入的新特性。它可以让你在class以外使用state和其他React特性。你可以在<a href="https://github.com/reactjs/rfcs/pull/68">这里</a>看到关于它的一些讨论。</p>\n<div class="gatsby-highlight">\n      <pre class="gatsby-code-jsx"><code class="gatsby-code-jsx"><span class="token keyword">import</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">Example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n<span class="gatsby-highlight-code-line">  <span class="token comment">// Declare a new state variable, which we\'ll call "count"</span>\n</span><span class="gatsby-highlight-code-line">  <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>You clicked <span class="token punctuation">{</span>count<span class="token punctuation">}</span> times<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span>\n        Click me\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre>\n      </div>\n<p><code class="gatsby-code-text">useState</code>这个方法是我们接触到的第一个”hook”。我们用它完成了一个最简单的组件，接下来我们会看到更多有趣的应用。</p>\n<p><strong>你可以立即跳到<a href="/docs/hooks-overview.html">下一页</a>开始学习Hooks。</strong> 在这一页，我们将继续解释为什么我们要在React中引入Hooks，以及它们将如何帮助你写出超棒的React应用。</p>\n<h2 id="视频介绍"><a href="#%E8%A7%86%E9%A2%91%E4%BB%8B%E7%BB%8D" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>视频介绍</h2>\n<p>在React Conf 2018，Sophie Alpert 和 Dan Abramov介绍了Hooks，然后Ryan Florence演示了如何用它们重构我们的应用。你可以在这里看到这个视频：</p>\n<br>\n<div>\n          <div\n            class="gatsby-resp-iframe-wrapper"\n            style="padding-bottom: 56.30769230769231%; position: relative; height: 0; overflow: hidden;"\n          >\n            <iframe src="//www.youtube.com/embed/dpw9EHDh2bM" frameborder="0" allowfullscreen style="\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n          "></iframe>\n          </div>\n          </div>\n<h2 id="no-breaking-changes"><a href="#no-breaking-changes" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>No Breaking Changes</h2>\n<p>在我们继续学习之前，你需要注意：</p>\n<ul>\n<li><strong>完全可选</strong> 如果你喜欢Hooks，你可以立即在一些组件和已经存在的代码中使用它们。不过如果你不喜欢也不要紧，你完全没必要学习或者使用它们。</li>\n<li><strong>100% 向后兼容</strong> Hooks不包含任何爆炸性的更新。</li>\n<li><strong>立即可用</strong> Hooks现在已经包含在alpha版本中。而且我们期望在接受社区反馈后把他们加入到React 16.7版本中。</li>\n</ul>\n<p><strong>classes不会被移除</strong> 你可以在这一页的<a href="#gradual-adoption-strategy">最后一节</a>读到更多关于Hooks的渐进策略。</p>\n<p><strong>Hooks不会影响你对React的理解</strong> 恰恰相反，Hooks为React的这些概念提供了更直接的API。之后你将会看到，有了Hooks，你可以以一种更加强大的方式将props, state, context, refs 和生命周期整合起来。</p>\n<p><strong>如果你只是想要学学Hooks如何使用，你可以直接跳到<a href="/docs/hooks-overview.html">下一页</a>。</strong> 当然你也可以继续读这一页。你将会在这里了解到更多我们引入Hooks的原因，以及要如何在已有的代码上使用Hooks重构我们的应用。</p>\n<h2 id="动机"><a href="#%E5%8A%A8%E6%9C%BA" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>动机</h2>\n<p>Hooks解决了我们在React发布至今的五年来遇到的一系列看似不相关的问题。不论你是刚刚开始学习React，或是一直在用它，甚至你只是在使用与React具有相似组件模型的框架，你一定或多或少注意到这些问题。</p>\n<h3 id="跨组件复用stateful-logic包含状态的逻辑十分困难"><a href="#%E8%B7%A8%E7%BB%84%E4%BB%B6%E5%A4%8D%E7%94%A8stateful-logic%E5%8C%85%E5%90%AB%E7%8A%B6%E6%80%81%E7%9A%84%E9%80%BB%E8%BE%91%E5%8D%81%E5%88%86%E5%9B%B0%E9%9A%BE" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>跨组件复用stateful logic(包含状态的逻辑)十分困难</h3>\n<p>React没有提供一种将可复用的行为“attach”到组件上的方式（比如redux的connect方法）。如果你已经使用了一段时间的React，你可能对<a href="/docs/render-props.html">render props</a> 和 <a href="/docs/higher-order-components.html">高阶组件</a>有一定的了解，它们的出现就是为了解决逻辑复用的问题。但是这些模式都要求你重新构造你的组件，这可能会非常麻烦。在很多典型的React组件中，你可以在React DevTool里看到我们的组件被层层叠叠的providers, consumers, 高阶组件, render props, 和其他抽象层包裹。当然你可以通过<a href="https://github.com/facebook/react-devtools/pull/503">筛选功能</a>把它们全部都过滤掉，但是这种现象也指出了一些更深层次的问题：React需要一些更好的底层元素来复用stateful logic.</p>\n<p>使用Hooks，你可以在将含有state的逻辑从组件中抽象出来，这将可以让这些逻辑容易被测试。同时，<strong>Hooks可以帮助你在不重写组件结构的情况下复用这些逻辑。</strong> 这样这些逻辑就可以跨组件复用，甚至你可以将他们分享到社区中。</p>\n<p>我们将在<a href="/docs/hooks-custom.html">自定义Hooks</a>中继续这一部分的讨论。</p>\n<h3 id="复杂的组件难以理解"><a href="#%E5%A4%8D%E6%9D%82%E7%9A%84%E7%BB%84%E4%BB%B6%E9%9A%BE%E4%BB%A5%E7%90%86%E8%A7%A3" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>复杂的组件难以理解</h3>\n<p>我们在刚开始构建我们的组件时它们往往很简单，然而随着开发的进展它们会变得越来越大、越来越混乱，各种逻辑在组件中散落的到处都是。每个生命周期钩子中都包含了一堆互不相关的逻辑。比如我们常常在<code class="gatsby-code-text">componentDidMount</code> 和 <code class="gatsby-code-text">componentDidUpdate</code> 中拉取数据，同时<code class="gatsby-code-text">compnentDidMount</code> 方法可能又包含一些不相干的逻辑，比如设置事件监听（之后需要在 <code class="gatsby-code-text">componentWillUnmount</code> 中清除）。最终的结果是强相关的代码被分离，反而是不相关的代码被组合在了一起。这显然会导致大量错误。</p>\n<p>在许多情况下，我们也不太可能将这些组件分解成更小的组件，因为stateful logic到处都是。测试它们也很困难。这是许多人喜欢将React与单独的状态管理库结合使用的原因之一。然而，这通常会引入太多的抽象，需要在不同的文件之间跳转，并且使得重用组件更加困难。</p>\n<p>为了解决这个问题，<strong>Hooks允许您根据相关部分(例如设置订阅或获取数据)将一个组件分割成更小的函数</strong>，而不是强制基于生命周期方法进行分割。您还可以选择使用一个reducer来管理组件的本地状态，以使其更加可预测。</p>\n<p>我们将在<a href="/docs/hooks-effect.html#tip-use-multiple-effects-to-separate-concerns">使用Effect Hook</a>中继续这一部分的讨论。</p>\n<h3 id="不止是用户，机器也对classes难以理解"><a href="#%E4%B8%8D%E6%AD%A2%E6%98%AF%E7%94%A8%E6%88%B7%EF%BC%8C%E6%9C%BA%E5%99%A8%E4%B9%9F%E5%AF%B9classes%E9%9A%BE%E4%BB%A5%E7%90%86%E8%A7%A3" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>不止是用户，机器也对Classes难以理解</h3>\n<p>据我们观察，classes是学习React的最大障碍。您必须了解<code class="gatsby-code-text">this</code>如何在JavaScript中工作，这与它在大多数语言中的工作方式非常不同。必须记住绑定事件处理程序。没有稳定的<a href="https://babeljs.io/docs/en/babel-plugin-transform-class-properties/">语法提案</a>，代码非常冗长。尽管人们可以很好地理解props、state和自顶向下的数据流，但仍然要与类做斗争。React中功能和类组件的区别以及何时使用每种组件都会导致有经验的React开发人员之间的分歧。</p>\n<p>除此以外，React已经发布了五年，我们还想在未来的五年让他保持稳定。就像在<a href="https://svelte.technology/">Svelte</a>, <a href="https://angular.io/">Angular</a>, <a href="https://glimmerjs.com/">Glimmer</a>和其他框架中展示的那样，组件的提前编译潜力巨大。尤其是在它不局限于模板的时候。最近我们在测试使用<a href="https://prepack.io/">Prepack</a>来进行<a href="https://github.com/facebook/react/issues/7323">component folding</a>，而且我们已经初步看到了成果。然而我们发现class组件可能会导致一些让我们做的这些优化白费的编码模式。类也为今天的工具带来了不少的issue。比如，classes不能很好的被minify，同时他们也造成了太多不必要的组件更新。我们想要提供一种便于优化的API。</p>\n<p>To solve these problems, <strong>Hooks let you use more of React’s features without classes.</strong> Conceptually, React components have always been closer to functions. Hooks embrace functions, but without sacrificing the practical spirit of React. Hooks provide access to imperative escape hatches and don’t require you to learn complex functional or reactive programming techniques.</p>\n<blockquote>\n<p>Examples</p>\n<p><a href="/docs/hooks-overview.html">Hooks at a Glance</a> is a good place to start learning Hooks.</p>\n</blockquote>\n<h2 id="gradual-adoption-strategy"><a href="#gradual-adoption-strategy" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Gradual Adoption Strategy</h2>\n<blockquote>\n<p><strong>TLDR: There are no plans to remove classes from React.</strong></p>\n</blockquote>\n<p>We know that React developers are focused on shipping products and don’t have time to look into every new API that’s being released. Hooks are very new, and it might be better to wait for more examples and tutorials before considering learning or adopting them.</p>\n<p>We also understand that the bar for adding a new primitive to React is extremely high. For curious readers, we have prepared a <a href="https://github.com/reactjs/rfcs/pull/68">detailed RFC</a> that dives into motivation with more details, and provides extra perspective on the specific design decisions and related prior art.</p>\n<p><strong>Crucially, Hooks work side-by-side with existing code so you can adopt them gradually.</strong> We are sharing this experimental API to get early feedback from those in the community who are interested in shaping the future of React — and we will iterate on Hooks in the open.</p>\n<p>Finally, there is no rush to migrate to Hooks. We recommend avoiding any “big rewrites”, especially for existing, complex class components. It takes a bit of a mindshift to start “thinking in Hooks”. In our experience, it’s best to practice using Hooks in new and non-critical components first, and ensure that everybody on your team feels comfortable with them. After you give Hooks a try, please feel free to <a href="https://github.com/facebook/react/issues/new">send us feedback</a>, positive or negative.</p>\n<p>We intend for Hooks to cover all existing use cases for classes, but <strong>we will keep supporting class components for the foreseeable future.</strong> At Facebook, we have tens of thousands of components written as classes, and we have absolutely no plans to rewrite them. Instead, we are starting to use Hooks in the new code side by side with classes.</p>\n<h2 id="next-steps"><a href="#next-steps" aria-hidden="true" class="anchor"><svg aria-hidden="true" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg></a>Next Steps</h2>\n<p>By the end of this page, you should have a rough idea of what problems Hooks are solving, but many details are probably unclear. Don’t worry! <strong>Let’s now go to <a href="/docs/hooks-overview.html">the next page</a> where we start learning about Hooks by example.</strong></p>',frontmatter:{title:"Introducing Hooks",next:"hooks-overview.html",prev:null},fields:{path:"docs/hooks-intro.md",slug:"docs/hooks-intro.html"}}},pathContext:{slug:"docs/hooks-intro.html"}}}});
//# sourceMappingURL=path---docs-hooks-intro-html-d7ddc173a38800b0c139.js.map